generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  name                   String
  email                  String    @unique
  password               String
  emailVerified          Boolean?
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  resetPasswordToken     String?   @unique
  resetPasswordExpiresAt DateTime?
  sessions               Session[]
  profiles               Profile[]
  Orders                 Order[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@map("verification_tokens")
}

model Profile {
  id           String        @id @default(cuid())
  name         String        @unique
  image        String?
  User         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  favoriteList FavoriteList?

  @@map("profiles")
}

model FavoriteList {
  id           String         @id @default(cuid())
  profileId    String         @unique
  profile      Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  favoriteList FavoriteItem[] @relation("FavoriteItems")

  @@map("favorite_lists")
}

model FavoriteItem {
  id            Int            @id @default(dbgenerated())
  title         String
  release_date  String
  poster_path   String
  backdrop_path String
  overview      String
  popularity    Float
  adult         Boolean
  type          Type
  favoriteLists FavoriteList[] @relation("FavoriteItems")

  @@map("favoriteItems")
}

model Order {
  id          String         @id @default(cuid())
  orderStatus OrderStatus
  plan        Plan
  price       Float
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

enum OrderStatus {
  CREATED
  SAVED
  APPROVED
  VOIDED
  COMPLETED
  PAYER_ACTION_REQUIRED
}

enum Plan {
  Basic
  Standard
  Premium
}

enum Type {
  Movie
  Show
}

enum Genre {
  Action
  Adventure
  Animation
  Comedy
  Crime
  Documentary
  Drama
  Family
  Fantasy
  History
  Horror
  Music
  Mystery
  Romance
  Science_Fiction
  Thriller
  TV_Movie
  War
  Western
}
