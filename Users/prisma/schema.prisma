generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  name                   String
  email                  String    @unique
  password               String
  emailVerified          Boolean?
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime?
  accounts               Account[]
  sessions               Session[]
  profiles               Profile[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@map("verification_tokens")
}

model Profile {
  id                 String  @id @default(cuid())
  User               User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String?
  moviesFavoriteList Movie[]

  @@map("profiles")
}

model Movie {
  id            String   @id @default(cuid())
  name          String
  image         String
  genre         Genre[]
  adult         Boolean
  time          DateTime
  backdrop_path String
  Profile       Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String?

  @@map("movies")
}

enum Genre {
  Action
  Adventure
  Animation
  Comedy
  Crime
  Documentary
  Drama
  Family
  Fantasy
  History
  Horror
  Music
  Mystery
  Romance
  Science_Fiction
  Thriller
  TV_Movie
  War
  Western
}
